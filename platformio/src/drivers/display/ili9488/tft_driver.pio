// Raspberry Pi Pico PIO program to output data to a TFT
// controller via a 8 bit 8080 style data path.

// Set: 1 output pin, TFT_RD, Active low.
// Side set: 1 output pin, TFT_WR. Active low.
// Data set: 8 consecutive output pins, TFT_D0 .. TFT_D7

.program tft_driver_pio
.side_set 1 opt ;  The TFT_WR output.

// The C++ code switches between the loops here
// by waiting for the SM to be idle and setting its PC.
//
public start_wr16:
   // TODO: Document here the initialization done in C++ each time
   // starting this program.

loop_wr16:

   // Fetch into OSR the next 32 bit value from the TX FIFO. 
   // This is a blocking operation. Sets WR high.
   pull side 1  
   // Shift the OSR reg right by 8 bits, loading the low 8 bits
   // of reg x with the shifted data.
   out x, 8
 
   // Write the first byte (MSB) and sets WR low. This also
   // shift OSR by 8 bits which we don't care about.
   out pins, 8 side 0 [1]     
  
   // Set TFT_WR back high.    
   nop side 1    

   // Move the LSB byte back to the OSR.
   mov osr, x        
   // Output the second byte and set TFT_WRITE low.
   out pins, 8 side 0    
   jmp loop_wr16 

// 8 bits writes are less time critical (happen less
// frequently) so we use more conservative timing.
public start_wr8:
   // TODO: Document here the initialization done in C++ each time
   // starting this program.

loop_wr8:
   //set pins 1

   // Fetch into OSR the next 32 bit value from the TX FIFO. 
   // This is a blocking operation. Sets WR high.
   pull side 1 [2]
   // Write the first byte (LSB) and sets WR low. This also 
   // shifts the OSR right by 8 bits.
   out pins, 8 side 0 [1]     
   jmp loop_wr8   

// 8 bits reads from the TFT
// Initialized by tft_driver.cpp:
// * Data pins direction = IN
// * TFT_RD, TFT_WR pins are high
// * x register = num of bytes to read
// * Y register = 0
//
// Starts at start_rd8
//
rd8_read_next:
   // NOTE: we add delays below to have sufficient settling time
   // for the TFT data. ILI9488 reads seems to be significantly 
   // slower than writes.
   
   // RD output pin = 0 (active).
   set pins 0 [7]

   // Clear ISR, since we shift in only 8 bits. Y is zero from
   // initialization.
   mov isr, y 

   // Shift left 8 pins values into ISR.
   in pins, 8

   // ED output pin = 1 (inactive).
   set pins 1

   // Write ISR to the RX FIFO.
   push [7]

   // If counter > 0, go to next iteration.
public start_rd8:
   jmp x-- rd8_read_next 

rd_halt:
   // TODO: Is there a single instruction stall forever command?
   pull  // dummy pull to stall
   jmp rd_halt



  





